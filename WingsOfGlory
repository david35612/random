-- Assuming 'plane_model' is the player's plane (camera's plane)
-- and 'plane_viewmodels' contains all other planes in the game
local playerPlane = game.Workspace.Camera.plane_model -- Player's plane
local planeViewmodels = game.Workspace.Camera.plane_viewmodels -- All other planes
-- Set scale factors for each axis
local lengthScaleFactor = 1.5 -- Length (X-axis)
local widthScaleFactor = 1.7 -- Width (Y-axis, make it fatter)
local heightScaleFactor = 1.5 -- Height (Z-axis)
-- Set the maximum size for parts (this is the original max size of the fuselage and wings)
local maxSize = Vector3.new(30, 30, 30) -- Adjust this to your desired maximum size
-- Function to resize fuselage and wings with specific scaling for each axis
local function resizePlane(plane)
    -- Ensure the plane has a fuselage and wings to scale
    local fuselage = plane:FindFirstChild("Fuselage")
    local wings = plane:FindFirstChild("Wings")
    -- If the fuselage exists, scale it
    if fuselage then
        local newSize = fuselage.Size * Vector3.new(lengthScaleFactor, widthScaleFactor, heightScaleFactor)
        
        -- Ensure the fuselage doesn't exceed the max size (after scaling)
        fuselage.Size = Vector3.new(
            math.min(newSize.X, maxSize.X),
            math.min(newSize.Y, maxSize.Y),
            math.min(newSize.Z, maxSize.Z)
        )
    end
    -- If the wings exist, scale them
    if wings then
        local newSize = wings.Size * Vector3.new(lengthScaleFactor, widthScaleFactor, heightScaleFactor)
        
        -- Ensure the wings don't exceed the max size (after scaling)
        wings.Size = Vector3.new(
            math.min(newSize.X, maxSize.X),
            math.min(newSize.Y, maxSize.Y),
            math.min(newSize.Z, maxSize.Z)
        )
    end
end
-- Resize all existing planes at the start
for _, plane in pairs(planeViewmodels:GetChildren()) do
    -- Skip the player's plane
    if plane ~= playerPlane then
        resizePlane(plane)
    end
end
-- Listen for new planes being added (respawned) and resize them
planeViewmodels.ChildAdded:Connect(function(plane)
    -- Skip the player's plane
    if plane ~= playerPlane then
        resizePlane(plane) -- Resize the new plane to the desired size
    end
end)
-- Force resizing of planes at the start of a new round
local function forceResizePlanes()
    for _, plane in pairs(planeViewmodels:GetChildren()) do
        if plane ~= playerPlane then
            resizePlane(plane) -- Resize all planes at the start of the round
        end
    end
end
-- Check and resize planes every frame to handle respawning
game:GetService("RunService").Heartbeat:Connect(function()
    forceResizePlanes() -- Keep resizing planes every frame to ensure they remain resized
end)
